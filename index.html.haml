- if @patients.size == 0
    %p No patients found.
- else
    %p This page by default shows patients waiting to be accepted as active in the system.  Click "Accept" to activate or "Decline" otherwise and provide a reason.  You may also assign Case Managers to patients.  Click the "Update" button to save your changes.  You may also edit the status of any active or inactive patient by using the Search box above.
    = form_tag :controller => 'account/roster_pending', :action => 'update' do
        = submit_tag 'Update', 'data-disable-with' => 'Updating. Please wait...', :onclick => 'return validateReasons()'
        %table
            %thead
                %tr{:style => 'font-size:90%'}
                    %th{:style => "text-align:center"} Patient
                    %th{:style => "text-align:center"} Date of Birth
                    %th{:style => "text-align:center"} Sex
                    %th{:style => "text-align:center"} Last A1C Date
                    %th{:style => "text-align:center"} A1C
                    -if @is_dm_account
                        %th{:style => "text-align:center"}
                            DM Status
                            %br
                            = check_box_tag("select_all_dm_accept", "true", false, :onclick => "checkAll(this.checked, 'dm')")
                            Accept All

                    - if @is_ckd_account
                        %div{:style => 'display:inline-block'}
                            %th{:style => "text-align:center;white-space:nowrap"}
                                CKD Stage
                                .tooltip{:class => 'ui-icon ui-icon-info', :style => 'display:inline-block', :help => @ckd_stage_rollover }
                        %th{:style => "text-align:center"}
                            CKD Status
                            %br
                            = check_box_tag("select_all_ckd_accept", "true", false, :onclick => "checkAll(this.checked, 'ckd')")
                            Accept All
                    %th{:style => "text-align:center"} Case Managers

            %tbody
                - @patients.each do |patient|
                    %tr{:style => 'font-size:90%'}
                        %td.link= link_to "#{patient.name}", flowsheet_account_patient_path(obfuscate_encrypt(patient.patient_id, session))
                        %td{:style => 'white-space:nowrap'}= patient.dob.to_date.strftime('%m-%d-%Y')
                        %td= patient.sex
                        - test_result = patient.last_result('A1C')
                        - if test_result.present?
                            %td= test_result.result_date.to_date.strftime('%m-%d-%Y')
                            %td= test_result.result
                        - else
                            %td= "--"
                            %td= "--"
                        - if @is_dm_account
                            - if test_result.present?
                                %td{:style => 'white-space:nowrap'}
                                    %span{:id => "#{patient.patient_id}_read_dm_status_span", :style => "display: #{patient.has_dm_status_to_review? ? 'none' : 'block'}"}
                                        - if patient.dm_extended_lookup.non_outreach_short_name.present?
                                            = patient.dm_extended_lookup.non_outreach_short_name
                                            - if patient.dm_extended_lookup.help.present?
                                                .tooltip{:class => 'ui-icon ui-icon-info', :style => 'display:inline-block', :help => patient.dm_extended_lookup.help }
                                        - else
                                            = patient.status_lookup.patient_status
                                        %br= link_to "Edit Status", '', :onclick => "return toggleStatusEdit(#{patient.patient_id}, true, 'dm')"
                                    %span{:id => "#{patient.patient_id}_edit_dm_status_span", :style => "display: #{patient.has_dm_status_to_review? ? 'block' : 'none'}"}
                                        = radio_button_tag "#{patient.id}[dm_accept]", "true", false, :id => "#{patient.patient_id}_dm_accept_button", :class => 'dm_accept', :onclick => "setReasonDisplay(#{patient.id}, 'dm')"
                                        Accept
                                        = radio_button_tag "#{patient.id}[dm_accept]", "false", false, :id => "#{patient.patient_id}_dm_decline_button", :onclick => "setReasonDisplay(#{patient.id}, 'dm')", :class => "not-accept-button"
                                        Decline
                                        = select_tag "#{patient.id}[dm_status]", options_for_select(Settings.review_statuses.dm), :prompt => '-- Reason --', :style => 'font-size:95%;display:none'
                                        = text_area_tag "#{patient.id}[dm_comments]", nil, :class => "roster-textarea", :maxlength => 250, :placeholder => "Comment", :style => 'display:none'
                                        - unless patient.has_dm_status_to_review?
                                            %br= link_to "Remove Edit", '', :onclick => "return toggleStatusEdit(#{patient.patient_id}, false, 'dm')"
                            - else
                                %td= "No Diabetes"
                        - if @is_ckd_account
                            - if patient.disease_stage_lookup.present?
                                %td{:style => "text-align:center"}= patient.disease_stage_lookup.disease_stage[0]
                            - else
                                %td= "--"
                            - if !patient.patient_state.present? or patient.patient_particip_status_lookup.patient_particip_status == 'Not Defined'
                                %td= "No Kidney Disease"
                            - else
                                %td{:style => 'white-space:nowrap'}
                                    %span{:id => "#{patient.patient_id}_read_ckd_status_span", :style => "display: #{patient.has_ckd_status_to_review? ? 'none' : 'block'}"}
                                        - if patient.ckd_extended_lookup.non_outreach_short_name.present?
                                            = patient.ckd_extended_lookup.non_outreach_short_name
                                            - if patient.ckd_extended_lookup.help.present?
                                                .tooltip{:class => 'ui-icon ui-icon-info', :style => 'display:inline-block', :help => patient.ckd_extended_lookup.help }
                                        - else
                                            = patient.patient_particip_status_lookup.patient_particip_status
                                        %br= link_to "Edit Status", '', :onclick => "return toggleStatusEdit(#{patient.patient_id}, true, 'ckd')"
                                    %span{:id => "#{patient.patient_id}_edit_ckd_status_span", :style => "display: #{patient.has_ckd_status_to_review? ? 'block' : 'none'}"}
                                        = radio_button_tag "#{patient.id}[ckd_accept]", "true", false, :id => "#{patient.patient_id}_ckd_accept_button", :class => 'ckd_accept', :onclick => "setReasonDisplay(#{patient.id}, 'ckd')"
                                        Accept
                                        = radio_button_tag "#{patient.id}[ckd_accept]", "false", false, :id => "#{patient.patient_id}_ckd_decline_button", :onclick => "setReasonDisplay(#{patient.id}, 'ckd')", :class => "not-accept-button"
                                        Decline
                                        = select_tag "#{patient.id}[ckd_status]", options_for_select(Settings.review_statuses.ckd), :prompt => '-- Reason --', :style => 'font-size:95%;display:none'
                                        = text_area_tag "#{patient.id}[ckd_comments]", nil, :class => "roster-textarea", :maxlength => 250, :placeholder => "Comment", :style => 'display:none'
                                        - unless patient.has_ckd_status_to_review?
                                            %br= link_to "Remove Edit", '', :onclick => "return toggleStatusEdit(#{patient.patient_id}, false, 'ckd')"
                        %td{:style => 'white-space:nowrap'}
                            %div{:id => "cm_names_#{patient.patient_id}"}
                                - if patient.case_managers.empty?
                                    None
                                - else
                                    - patient.case_managers.sort.each do |pcm|
                                        = pcm.name
                                        %br
                            = select_tag "#{patient.id}[cm_ids][]", options_for_select(@case_managers.pluck(:contact_id), patient.case_managers.sort.map { |m| m.contact_id }), {:multiple => true, :style => 'display:none'}
                            = link_to "Assign/Change Case Managers", '', :onclick => "return popupCMs(#{patient.patient_id})"

        = submit_tag 'Update', 'data-disable-with' => 'Updating. Please wait...', :onclick => 'return validateReasons()'

- content_for :javascript_includes do
    :javascript

        function checkAll(checked, type) {

            var boxes = document.getElementsByClassName(type + '_accept');
            var element;
            var name;
            var pat_id;
            var reasonTag;
            var commentTag;
            var declineButton;
            for (var i = 0; i < boxes.length; ++i) {
                element = boxes.item(i);
                // if element is visible within its span
                if (element.offsetParent != null) {
                    name = element.getAttribute('name');
                    pat_id = name.substring(0, name.indexOf('['))
                    if (checked) {
                        element.checked = true;
                        reasonTag = document.getElementsByName(pat_id + "[" + type + "_status]")[0];
                        commentTag = document.getElementsByName(pat_id + "[" + type + "_comments]")[0];
                        declineButton = document.getElementById(pat_id + "_"  + type + "_decline_button");
                        declineButton.checked = false;
                        if (reasonTag != null) {
                            reasonTag.setAttribute("style", "display:none");
                            reasonTag.value = '';
                        }
                        if (commentTag != null) {
                            commentTag.setAttribute("style", "display:none");
                            commentTag.value = '';
                        }
                   } else {
                        element.checked = false;
                   }
                }
            }

        }

        function validateReasons() {
            buttons = document.getElementsByClassName('not-accept-button')
            for (var i = 0; i < buttons.length; ++i) {
                button_name = buttons[i].name;
                if (buttons[i].checked) {
                    pat_id = button_name.substring(0, button_name.indexOf('['))
                    status_box_name = button_name.substring(0, button_name.indexOf('accept]')) + 'status]'
                    status_box = document.getElementsByName(status_box_name)
                    if (status_box[0].value == '') {
                        alert('Please choose a reason for all declined patients and Update again.')
                        return false;
                    }
                }
            }
            return true;
        }

        function validateComments() {
            comment_boxes = document.getElementsByClassName('roster-textarea')
            for (var i = 0; i < comment_boxes.length; ++i) {
                boxname = comment_boxes[i].name;
                if (comment_boxes[i].value.length > 0) {
                    pat_id = boxname.substring(0, boxname.indexOf('['))
                    status_box_name = boxname.substring(0, boxname.indexOf('comments]')) + 'status]'
                    status_box = document.getElementsByName(status_box_name)
                    if (status_box[0].value == '') {
                        alert('Please remove any comments where the status is unchanged and Update again.')
                        return false;
                    }
                }
            }
            return true;
        }

        function showStageHelp() {
            alert('CKD Stages:\n\n0 - No evidence of CKD.\n2 - Early stage CKD (proteinuria with normal or near-normal filtration).  ICD9 585.2\n3 - Established Stage 3 CKD (moderately depressed filtration). ICD9 585.3\n4 - Established Stage 4 CKD (severely depressed filtration). ICD9 585.4\n5 - Established Stage 5 CKD (renal failure). ICD9 585.5\nA - Moderately depressed filtration without evidence of long-term damage. ICD9 583.9\nH - History of renal abnormalities.  ICD-9 V13.09\nP - Acute proteinuria (less than 90 days). ICD9 583.9')
            return false;
        }

        function popupCMs(patient_id) {
            var cmSelect = document.getElementsByName(patient_id + "[cm_ids][]")[0];

            var thisWindow = window.open('Case Manager Selection Window', 'CMSelect', 'height=400,width=300,left=500,top=100,titlebar=yes');
            thisWindow.document.write("<html><head><title>Select Case Managers</title></head>");
            thisWindow.document.write("<body><form><table id='cmTable'>");
            var cmArray = #{@case_managers.map {|cm| cm.name } }
            var cmIDs = #{@case_managers.map {|cm| cm.contact_id } }
            for (var i = 0; i < cmArray.length; ++i) {
                var sName = cmArray[i]
                thisWindow.document.write("<tr><td><input type='checkbox' name='these_ids[]' value='");
                thisWindow.document.write(sName + "|" + cmIDs[i] + "'");
                    for (var j = 0; j < cmSelect.options.length; ++j) {

                        if (cmSelect.options[j].selected &&
                            cmSelect.options[j].value == cmIDs[i]) {
                            thisWindow.document.write(" checked");
                        }
                    }

                thisWindow.document.write(" />")
                thisWindow.document.write(sName);
                thisWindow.document.write("</td></tr>");
            }
            thisWindow.document.write("<tr><td><input type='button' value='OK' onclick='window.opener.handlePopupCMs(window, " + patient_id + ")' />");
            thisWindow.document.write("</table></form>");
            thisWindow.document.write("</body></html>");
            return false;
        }

        function handlePopupCMs(thisWindow, patient_id) {
            var parentDiv = document.getElementById("cm_names_" + patient_id)
            var hiddenCMIDSelect = document.getElementsByName(patient_id + "[cm_ids][]")[0];
            var newValues = new Array();
            var sHtml = "";
            var thisDoc = thisWindow.document;
            var eles = thisDoc.getElementsByName('these_ids[]');
            var bChanged = false;
            var iCount = 0;
            for (var i = 0; i < eles.length; ++i) {
                var opt = hiddenCMIDSelect.options[i];
                var bWasSelected = opt.selected;
                if (eles[i].checked) {
                    var nameAndId = eles[i].value.split("|");
                    sHtml += nameAndId[0] + "<br />";
                    newValues[iCount++] = nameAndId[1];
                    opt.selected = true;
                    if (!bWasSelected) {
                        bChanged = true;
                    }
                } else {
                    opt.selected = false;
                    if (bWasSelected) {
                        bChanged = true;
                    }
                }
            }

            if (bChanged) {
                add_confirmation_to_links()
            }
            parentDiv.innerHTML = sHtml;
            thisWindow.close();
            return false;
        }

        function setReasonDisplay(patientId, sType) {
            var reasonTag = document.getElementsByName(patientId + "[" + sType + "_status]")[0];
            var commentTag = document.getElementsByName(patientId + "[" + sType + "_comments]")[0];
            var tags = document.getElementsByName(patientId + "[" + sType + "_accept]");
            for (var i = 0; i < tags.length; ++i) {
                if (tags[i].checked) {
                    if (tags[i].value == "true") {
                        reasonTag.setAttribute("style", "font-size:95%;display:none");
                        commentTag.setAttribute("style", "display:none");
                    } else {
                        reasonTag.setAttribute("style", "font-size:95%;display:block");
                        commentTag.setAttribute("style", "display:block");
                    }
                }
            }
        }

        function toggleStatusEdit(patientId, bShowEdit, sType) {
            var readTag = document.getElementById(patientId + "_read_" + sType + "_status_span");

            var editTag = document.getElementById(patientId + "_edit_" + sType + "_status_span");
            readTag.setAttribute("style", "display:" + (bShowEdit ? "none" : "block"));
            editTag.setAttribute("style", "display:" + (bShowEdit ? "block" : "none"));
            if (!bShowEdit) {
                var reasonTag = document.getElementsByName(patientId + "[" + sType + "_status]")[0];
                var commentTag = document.getElementsByName(patientId + "[" + sType + "_comments]")[0];
                var acceptButton = document.getElementById(patientId + "_"  + sType + "_accept_button");
                var declineButton = document.getElementById(patientId + "_"  + sType + "_decline_button");
                reasonTag.setAttribute("style", "display:none");
                commentTag.setAttribute("style", "display:none");
                reasonTag.value = '';
                commentTag.value = '';
                acceptButton.checked = false;
                declineButton.checked = false;
            }
            return false;
        }

        // This replaces the application.js level confirmBox, in order to add custom functionality
        function confirmBoxLocal(message, forward_url) {
            var thisWindow = window.open('Confirm Action', 'Confirm Action', 'height=150,width=350,left=700,top=100,titlebar=yes');
            thisWindow.document.write("<html><head><title>Confirm Action</title></head>");
            thisWindow.document.write("<body><form><table id='caTable'><p>");
            thisWindow.document.write(message);
            thisWindow.document.write("</p><tr><td><input type='button' value='OK' onclick=\"window.close();window.opener.pageHasChanges = false;window.opener.location = '");
            thisWindow.document.write(forward_url);
            thisWindow.document.write("'\" /></td>");
            thisWindow.document.write("<td><input type='button' value='Cancel' onclick='window.close()' /></td></tr>");
            thisWindow.document.write("</table></form>");
            thisWindow.document.write("</body></html>");
            return false;
        }

        function prompt_before_exiting (old_link) {
            confirmBoxLocal("You have non-updated changes on this page. Do you still want to leave?", old_link);
        }

        // This replaces the application.js level confirmBox, in order to add custom functionality
        function confirmBoxLocalSearch(message) {
            var thisWindow = window.open('Confirm Action', 'Confirm Action', 'height=150,width=350,left=700,top=100,titlebar=yes');
            thisWindow.document.write("<html><head><title>Confirm Action</title></head>");
            thisWindow.document.write("<body><form><table id='caTable'><p>");
            thisWindow.document.write(message);
            thisWindow.document.write("</p><tr><td><input type='button' value='OK' onclick='window.close();window.opener.pageHasChanges = false;window.opener.document.forms[0].submit();' />");
            thisWindow.document.write("</td>");
            thisWindow.document.write("<td><input type='button' value='Cancel' onclick='window.close();' /></td></tr>");
            thisWindow.document.write("</table></form>");
            thisWindow.document.write("</body></html>");
            return false;
        }

        function prompt_before_search_submit() {
            if (pageHasChanges) {
                confirmBoxLocalSearch("You have non-updated changes on this page. Do you still want to run a new search?");
                return false;
            }
            return true;
        }

        var pageHasChanges = false;

        function add_confirmation_to_links() {
            pageHasChanges = true;
            var old_link="";

            for (var i=0; i < document.links.length; i++) {
                old_link = document.links[i].href;
                // don't alter links more than once
                if (old_link.indexOf("javascript: prompt_before_exiting") == -1) {
                    document.links[i].href = "javascript: prompt_before_exiting('"+ old_link + "')";
                }
            }

            remove_events_from_form_elements(document);
        }

        function add_events_to_form_elements(doc) {
            for (var i=0; i < doc.forms.length; i++) {
                for (var j=0; j < doc.forms[i].elements.length; j++) {
                    if (doc.forms[i].elements[j].type != 'submit' &&
                        doc.forms[i].elements[j].name.indexOf('search') == -1) {
                        doc.forms[i].elements[j].onchange = add_confirmation_to_links;
                    }
                }
            }
        }

        function remove_events_from_form_elements (doc) {
            for (var i=0; i < doc.forms.length; i++) {
                for (var j=0; j < doc.forms[i].elements.length; j++) {
                    doc.forms[i].elements[j].onchange = "";
                }
            }
        }

        // The sign out link, when there were unsaved changes on the page, was propagating the
        // confirm box in 'prompt_before_exiting' twice.  Maybe a bug in rails, but in any case, the below fixes it.
        $("#sign_out_link").click(function(event) {
            event.stopPropagation();
        });

        add_events_to_form_elements(document);


